blueprint:
  name: Müllabhol-Erinnerung für AWTRIX
  description: Zeigt Erinnerungen auf AWTRIX für die Müllabholung am nächsten Tag ab 17:00 Uhr an
  domain: automation
  input:
    mqtt_prefix:
      name: MQTT-Präfix
      description: Das MQTT-Präfix deiner AWTRIX (z.B. awtrix)
      default: "awtrix"
    calendar_entity:
      name: Kalender-Entität
      description: Die Kalender-Entität, die die Müllabhol-Ereignisse enthält
      selector:
        entity:
          domain: calendar
    event_names:
      name: Ereignisnamen
      description: Komma-separierte Liste der zu überwachenden Ereignisnamen (z.B. Restmüll, Gelber Sack, Papiermüll, Biomüll)
      default: "Restmüll, Gelber Sack, Papiermüll, Biomüll"
    icon_id:
      name: Icon-ID
      description: Die ID des Icons, das auf AWTRIX angezeigt wird (siehe AWTRIX-Dokumentation)
      default: "12345"
    text_color:
      name: Schriftfarbe
      description: Die Farbe des Textes in Hexadezimal (z.B. FFFFFF für Weiß)
      default: "FFFFFF"
    rainbow:
      name: Regenbogen-Effekt
      description: Regenbogen-Text-Effekt aktivieren
      default: false
      selector:
        boolean:
    scroll_speed:
      name: Scroll-Geschwindigkeit
      description: Die Scroll-Geschwindigkeit in Prozent
      default: 80
      selector:
        number:
          min: 0
          max: 100
          step: 1
    removal_time:
      name: Entfernungszeit
      description: Die Uhrzeit, zu der die Erinnerungen entfernt werden sollen
      default: "06:00:00"
      selector:
        time:

trigger:
  - platform: time
    at: '17:00:00'

action:
  - variables:
      removal_time: !input removal_time
      tomorrow: '{{ (now() + timedelta(days=1)).date() }}'
      removal_datetime: '{{ tomorrow | string + " " + removal_time }}'
      removal_timestamp: '{{ as_timestamp(removal_datetime) }}'
      lifetime: '{{ (removal_timestamp - now().timestamp()) | int }}'
      event_names_list: "{{ event_names.split(',') | map('trim') | list }}"
  - service: calendar.get_events
    data:
      entity_id: !input calendar_entity
      start_time: '{{ (now() + timedelta(days=1)).replace(hour=0, minute=0, second=0).isoformat() }}'
      end_time: '{{ (now() + timedelta(days=2)).replace(hour=0, minute=0, second=0).isoformat() }}'
    response_variable: events
  - repeat:
      for_each: "{{ event_names_list }}"
      sequence:
        - condition: template
          value_template: >
            {{ events.events | selectattr('summary', 'eq', repeat.item) | list | count > 0 }}
        - service: mqtt.publish
          data:
            topic: '{{ mqtt_prefix }}/custom/waste_reminder_{{ repeat.item | replace(" ", "_") }}'
            payload: >
              {
                "text": "Mülltonne Rausstellen: {{ repeat.item }}",
                "icon": "{{ icon_id }}",
                "color": "{{ text_color }}",
                "rainbow": {{ rainbow | tojson }},
                "scrollSpeed": {{ scroll_speed }},
                "lifetime": {{ lifetime }}
              }
